sort:
	Move(t0, _ARG1)
	Move(t1, 0)
	Move(t26, t0)
	Call_1(lengthInt, t26)
	Move(t27, _RV1)
	Move(t2, t27)
L0:
	CJump(t1 < t2, L1, L2)
L1:
	Move(t3, t1)
L3:
	CJump(t3 > 0, L4, L5)
L4:
	Move(t4, t3 - 1)
	CJump(t4 U< [t0 - 4], L8, outOfBounds)
L8:
	Move(t5, t3)
	CJump(t5 U< [t0 - 4], L9, outOfBounds)
L9:
	CJump([t0 + t4 * 4] > [t0 + t5 * 4], L6, L7)
L6:
	Move(t6, t3)
	CJump(t6 U< [t0 - 4], L10, outOfBounds)
L10:
	Move(t7, [t0 + t6 * 4])
	Move(t8, t3)
	CJump(t8 U< [t0 - 4], L11, outOfBounds)
L11:
	Move(t9, t3 - 1)
	CJump(t9 U< [t0 - 4], L12, outOfBounds)
L12:
	Move([t0 + t8 * 4], [t0 + t9 * 4])
	Move(t10, t3 - 1)
	CJump(t10 U< [t0 - 4], L13, outOfBounds)
L13:
	Move([t0 + t10 * 4], t7)
L7:
	Move(t3, t3 - 1)
	Jump(L3)
L5:
	Move(t1, t1 + 1)
	Jump(L0)
L2:
	Return()
assertEquals:
	Move(t0, _ARG1)
	Move(t11, _ARG2)
	Move(t1, 0)
	Move(t28, t0)
	Call_1(lengthInt, t28)
	Move(t29, _RV1)
	Move(t2, t29)
L14:
	CJump(t1 < t2, L15, L16)
L15:
	Move(t12, t1)
	CJump(t12 U< [t0 - 4], L17, outOfBounds)
L17:
	Move(t13, t1)
	CJump(t13 U< [t11 - 4], L18, outOfBounds)
L18:
	Move(t30, [t0 + t12 * 4] == [t11 + t13 * 4])
	Call_1(assert, t30)
	Move(t1, t1 + 1)
	Jump(L14)
L16:
	Return()
printArr:
	Move(t0, _ARG1)
	Move(t1, 0)
	Move(t31, t0)
	Call_1(lengthInt, t31)
	Move(t32, _RV1)
	Move(t2, t32)
L19:
	CJump(t1 < t2, L20, L21)
L20:
	Move(t14, t1)
	CJump(t14 U< [t0 - 4], L22, outOfBounds)
L22:
	Move(t33, [t0 + t14 * 4])
	Call_1(unparseInt, t33)
	Move(t34, _RV1)
	Move(t35, t34)
	Call_1(print, t35)
	Move(t1, t1 + 1)
	Jump(L19)
L21:
	Return()
getArr:
	Move(t15, _ARG1)
	Move(t16, _ARG2)
	Move(t1, 0)
	Move(t17, t16)
	Move(t36, t17 * 4 + 4)
	Call_1(malloc, t36)
	Move(t37, _RV1)
	Move(t18, t37)
	Move([t18], t17)
	Move(t19, 0)
L23:
	CJump(t19 < t17, L24, L25)
L24:
	Move([t18 + 4 + t19 * 4], 0)
	Move(t19, t19 + 1)
	Jump(L23)
L25:
	Move(t20, t18 + 4)
L26:
	CJump(t1 < t16, L27, L28)
L27:
	CJump(t15, L29, L30)
L29:
	Move(t21, t1)
	CJump(t21 U< [t20 - 4], L32, outOfBounds)
L32:
	Move([t20 + t21 * 4], t1 + 1)
	Jump(L31)
L30:
	Move(t22, t1)
	CJump(t22 U< [t20 - 4], L33, outOfBounds)
L33:
	Move([t20 + t22 * 4], t16 - t1)
L31:
	Move(t1, t1 + 1)
	Jump(L26)
L28:
	Move(t38, t20)
	Return(t38)
main:
	Move(t23, 10)
	Move(t39, 0)
	Move(t40, t23)
	Call_1(getArr, t39, t40)
	Move(t41, _RV1)
	Move(t24, t41)
	Move(t42, 1)
	Move(t43, t23)
	Call_1(getArr, t42, t43)
	Move(t44, _RV1)
	Move(t25, t44)
	Move(t45, t24)
	Call_1(sort, t45)
	Move(t46, t24)
	Move(t47, t25)
	Call_1(assertEquals, t46, t47)
	Move(t48, t24)
	Call_1(printArr, t48)
	Return()
