sort(a: int[]) {
    i:int = 0; 
    n:int = lengthInt(a); 
    while (i < n) {
        j:int = i;
        while(j > 0) {
            if(a[j-1] > a[j]) {
                swap:int = a[j];
                a[j] = a[j-1];
                a[j-1] = swap;
            }
            j = j-1;
        }       
        i = i+1;
    }
}

assertEquals(a:int[], b:int[]) {
    i:int = 0;
    n:int = lengthInt(a);
    while (i < n) {
        assert(a[i] == b[i]);
        i = i + 1;
    }
}

printArr(a:int[]) {
    i:int = 0;
    n:int = lengthInt(a);
    while (i < n) {
        print(unparseInt(a[i]));
        i = i + 1;
    }
}

getArr(sorted:bool, numOfElements: int): int[] {
    i:int = 0;
    tosort: int[numOfElements];
    while (i < numOfElements) {
        if(sorted) {
            tosort[i] = i+1;
        } else {
            tosort[i] = numOfElements - i;
        }
        i = i+1;
    }
    return tosort;
}

main() {
    max:int = 10;
    
    arr:int[] = getArr(false, max);
    expectedArrOrder: int[] = getArr(true, max);

    sort(arr);
    assertEquals(arr, expectedArrOrder);
    printArr(arr);
}
