main:
	Move(t12, 5 * 4 + 4)
	Call_1(malloc, t12)
	Move(t13, _RV1)
	Move(t0, t13)
	Move([t0], 5)
	Move([t0 + 4], 10)
	Move([t0 + 8], 20)
	Move([t0 + 12], 30)
	Move([t0 + 16], 40)
	Move([t0 + 20], 50)
	Move(t1, t0 + 4)
	Move(t2, 0)
	CJump(t2 U< [t1 - 4], L0, outOfBounds)
L0:
	Move([t1 + t2 * 4], 10)
	Move(t3, 1)
	CJump(t3 U< [t1 - 4], L1, outOfBounds)
L1:
	Move([t1 + t3 * 4], 20)
	Move(t4, 2)
	CJump(t4 U< [t1 - 4], L2, outOfBounds)
L2:
	Move([t1 + t4 * 4], 30)
	Move(t5, 3)
	CJump(t5 U< [t1 - 4], L3, outOfBounds)
L3:
	Move([t1 + t5 * 4], 40)
	Move(t6, 4)
	CJump(t6 U< [t1 - 4], L4, outOfBounds)
L4:
	Move([t1 + t6 * 4], 50)
	Move(t7, 0)
	CJump(t7 U< [t1 - 4], L5, outOfBounds)
L5:
	Move(t8, 1)
	CJump(t8 U< [t1 - 4], L6, outOfBounds)
L6:
	Move(t9, 2)
	CJump(t9 U< [t1 - 4], L7, outOfBounds)
L7:
	Move(t10, 3)
	CJump(t10 U< [t1 - 4], L8, outOfBounds)
L8:
	Move(t11, 4)
	CJump(t11 U< [t1 - 4], L9, outOfBounds)
L9:
	Move(t14, [t1 + t7 * 4] + [t1 + t8 * 4] + [t1 + t9 * 4] + [t1 + t10 * 4] + [t1 + t11 * 4])
	Return(t14)
